IS_MACOS:=$(shell test -d /Library && echo macos)

ifneq ($(IS_MACOS),) # Mac compile
    CPPFLAGS=-DHAVE_SHA1
    LIBS=-lz -lpthread -lcrypto
    RUBY_LDFLAGS?=-shared
    RUBY_LIB?=-lruby
    SO_PYTHON=so
    SO_RUBY=bundle
endif

ifeq ($(IS_MACOS),) # Linux compile
    CPPFLAGS=-DHAVE_SHA1
    LIBS=-lz -lpthread -lcrypto -lrt
    RUBY_LDFLAGS?=-shared 
    RUBY_LIB?=-lruby18
    SO_PYTHON=so
    SO_RUBY=rb.so
endif

PYTHON_INSTALLDIR?=@PYTHON_INSTALL_PATH@
PYTHON_INCLUDE?=@PYTHON_INCLUDES@
PYTHON_LIB?=@PYTHON_LIB@
RUBY_INCLUDE?=-I@RUBY_EXT_INC@
RUBY_INSTALLDIR?=@RUBY_EXT_INC@

A=a
O=o
CC=gcc $(CPPFLAGS) $(CFLAGS) -pg -g -fPIC -Wimplicit
CXX=g++ $(CPPFLAGS) $(CXXFLAGS) -pg -g -fPIC -Wimplicit
INSTALL=/usr/bin/install -c
DEP=cpp -

MODELS=model_cv_dtree.cpp model_cv_ann.cpp model_cv_svm.cpp model_cv_linear.cpp model_perceptron.c model_knearest.c
VAR_SELECTORS=varselect_cv_dtree.cpp
CODE_GENERATORS=codegen_python.c codegen_ruby.c codegen_js.c codegen_c.c
MRSCAKE_SOURCES=$(MODELS) $(VAR_SELECTORS) $(CODE_GENERATORS) cvtools.c constant.c ast.c \
	model.c serialize.c io.c list.c model_select.c dict.c dataset.c \
	datacache.c text.c environment.c codegen.c ast_transforms.c \
	stringpool.c settings.c job.c var_selection.c \
	transform.c mrscake.c util.c

NET_SOURCES=net/distribute.c net/protocol.c net/server.c 

CV_SOURCES=lib/alloc.cpp lib/ann_mlp.cpp lib/arithm.cpp lib/array.cpp lib/boost.cpp lib/cnn.cpp lib/convert.cpp lib/copy.cpp lib/data.cpp \
	lib/datastructs.cpp lib/ertrees.cpp lib/estimate.cpp lib/gbt.cpp lib/inner_functions.cpp lib/knearest.cpp lib/mathfuncs.cpp lib/matmul.cpp \
	lib/matrix.cpp lib/missing.cpp lib/persistence.cpp lib/precomp.cpp lib/rand.cpp lib/rtrees.cpp lib/stat.cpp lib/svm.cpp lib/system.cpp lib/tables.cpp \
	lib/testset.cpp lib/tree.cpp

SOURCES=$(MRSCAKE_SOURCES) $(NET_SOURCES) $(CV_SOURCES) 
OBJECTS=$(addsuffix .o,$(basename $(SOURCES)))
DEPS=$(addsuffix .dep,$(basename $(SOURCES)))

%.dep: %.c
	cpp -I. -MF$@ -MT$< -MM $<
%.dep: %.cpp
	cpp -I. -MF$@ -MT$< -MM $<

.deps: $(DEPS)
	cat $(DEPS) > .deps
	rm -f *.dep net/*.dep lib/*.dep

all: mrscake-job-server mrscake.$(A) mrscake.$(SO_PYTHON) mrscake.$(SO_RUBY)

lib/libml.a: lib/*.cpp lib/*.hpp lib/*.h
	cd lib;make libml.a

mrscake-job-server: server.$(O) $(OBJECTS) lib/libml.a
	$(CXX) server.$(O) $(OBJECTS) lib/libml.a -o $@ $(LIBS)

%.$(O): %.c
	$(CC) -c -I. -Ilib $< -o $@

%.$(O): %.cpp
	$(CXX) -c -I. -Ilib $< -o $@

# ------------ static library ----------------

mrscake.$(A): $(OBJECTS)
	$(AR) cru $@ $(OBJECTS)

# ------------ python interface --------------

mrscake.$(SO_PYTHON): mrscake.py.c mrscake.h list.h $(OBJECTS) lib/libml.a
	$(CC) $(PYTHON_INCLUDE) -shared mrscake.py.c $(OBJECTS) lib/libml.a -o $@ $(LIBS) $(PYTHON_LIB) -lstdc++

python_interpreter: python_interpreter.c
	$(CC) $(PYTHON_INCLUDE) python_interpreter.c -o python_interpreter $(PYTHON_LIB)

# ------------ ruby interface ----------------

mrscake.$(SO_RUBY): mrscake.rb.c mrscake.h $(OBJECTS)
	$(CC) $(RUBY_LDFLAGS) $(RUBY_CPPFLAGS) $(RUBY_INCLUDE) mrscake.rb.c $(OBJECTS) lib/libml.a -o $@ $(LIBS) $(RUBY_LIB) -lstdc++

# ------------ installation ------------------

install:
	$(INSTALL) mrscake.$(SO_RUBY) $(RUBY_INSTALLDIR)/mrscake.$(SO_RUBY)
	$(INSTALL) mrscake.$(SO_PYTHON) $(PYTHON_INSTALLDIR)/mrscake.$(SO_PYTHON)

# ------------ old test code -----------------

test: mrscake.so
	python test_python_module.py

local-clean:
	rm -f *.dep net/*.dep net/*.o lib/*.dep *.o *.obj *.$(O) mrscake.$(SO) predict.$(SO) prediction.$(SO)

clean: local-clean
	rm -f lib/*.$(O) lib/*.o lib/*.obj lib/*.a lib/*.gch lib/*.dep
	rm -rf *.dSYM


.PHONY: clean all test local-clean
